# @Version  : 1.0
# @Author   : Jun1999
# @Name     : 03位运算符.py
# @Time     : 2024/8/1 下午11:05

"""
~ 按位取反：对数据的补码的每个二进制取反（包括符号位），即1变为0，0变为1

& 按位与：参与运算的两个值，如果两个相应值都为1，则该位的结果为1，否则为0
2 & 3 = ?
2的补码： 0000 0010
3的补码： 0000 0011
2 & 3：  0000 0010 补码 ==> 0000 0010 原码 +2

^ 按位异或：当两个对应的二进制相异时，结果为1
2 ^ -3 = ?
2的补码：   0000 0010
-3的补码：  1111 1101  -3的原码：1000 0011 => 反码：1111 1100  =>补码:1111 1101
2 ^ -3 =  1111 1111 补码 => 1111 1110 反码 => 1000 0001 原码 -1


| 按位或：只要对应的二个二进制有一个为1时，结果位就为1
2 | 3 = ?
2的补码：0000 0010
3的补码：0000 0011
2 | 3 = 0000 0011 补码 => 0000 0011 原码 3


<< 左移 ：运算数的各二进制全部左移若干个，由<<右边的数指定移动的位数，符号位不变，高位丢弃，低位补0
【左移几位就是等于 乘以几个2】
5<<1
5的补码：0000 0101 => 0000 1010 补码 => 0000 1010 原码 10



>> 右移：运算数的各二进制全部右移若干个，由>>右边的数指定移动的位数，符号位不变，低位溢出，用符号位补溢出的高位
【右移几位就是等于 除以几个2，并且取较小的整数】
5>>1
5的补码： 0000 0101 => 0000 0010 移动后的补码 => 0000 0010 原码 2

"""

# print(~-2)
# print(~2)

# print(-9 / 7)
# print(-9 // 7)

"""
1111 1101 补码
1000 0010 反码
1000 0011 补码 补码的补码是原码 -3
"""

a = 1 >> 2
b = -1 >> 2 # -1/2=-0.5 => -1/2=-0.5 => -1
c = 1 << 2
d = -1 << 2
print("a=",a)
print("b=",b)
print("c=",c)
print("d=",d)
